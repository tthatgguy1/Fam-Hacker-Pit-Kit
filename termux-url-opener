#!/data/data/com.termux/files/usr/bin/bash
# Project Name: Fam-Hacker-Pit-Kit
# Coded by: tthatgguy1 (You dont become a coder by just changing the credits
# Github: https://github.com/tthatgguy1/Fam-Hacker-Pit-Kit
# Date : 12/04/2024
# Updated 09/09/2025
URL="$1"

#ESC=$'\e'
#GRN="${ESC}[38;2;51;255;0m"       # ${GRN}   $GRN  - Lime Green
#PNK="${ESC}[38;2;255;16;240m"     # ${PNK}   $PNK  - Bright Magenta
#NONG="${ESC}[38;2;255;95;0m"      # ${NONG}  $NONG - Neon Orange
#BCYN="${ESC}[38;2;0;255;255m"     # ${BCYN}  $BCYN - Cyan
#ACID="${ESC}[38;2;204;255;0m"     # ${ACID}  $ACID - Acid Green
#VBLU="${ESC}[38;2;138;43;226m"    # ${VBLU}  $VBLU - Violet Blue
#NPPL="${ESC}[38;2;188;19;254m"    # ${NPPL}  $NPPL - Neon Purple
#BWHT="${ESC}[38;2;255;255;255m"   # ${BWHT}  #BWHT - Bright White
#RESET="${ESC}[0m"                 # ${RESET} $RESET

YT_WRK="$HOME/downloads" 	  # ${YT_WRK}
NFS_HOME="$HOME/storage/shared/Fam-Hacker-Pit-Kit"               # ${NFS_HOME}
VPIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Video-Pit" # ${VPIT}
APIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Audio-Pit" # ${APIT}

TXS="/.NFS-Data/sfx/TXS.mp3"        # ${TXS}
MSTART="/.NFS-Data/sfx/MDLD.mp3"    # ${MSTART}
CMP="/.NFS-Data/sfx/c.mp3"          # ${CMP}
MDATA="/.NFS-Data/sfx/MDATA.mp3"    # ${MDATA}
FHS="/.NFS-Data/sfx/FHS.mp3"        # ${FHS}
MFGTA="/.NFS-Data/sfx/MFGTA.mp3"    # ${MFGTA}
SKL="/.NFS-Data/sfx/SKL.mp3"        # ${SKL}

cd downloads
printf "\n\n"

toilet -o -f smslant -F metal "Fam-Hacker"
printf "\n\n"

printf "The Script Will Take About 30 Seconds To\nGather Meta-Data From The URL\nDownloading\n$TITLE\nIn Best Available Resolution\nPlease Stand By\n"

printf "Welcome To Fam-Hacker Tube Client\nWritten By Nah-Fam_Studios (Seth J. Nelson)\nThis Script Will Download Any YouTube URL\nThat Is Shared To Termux\n"
printf "\n\n"

mpv $NFS_HOME/$SKL >/dev/null 2>&1
printf "\n\n"

sleep 2.0
mpv $NFS_HOME/$MDATA >/dev/null 2>&1
printf "\n\n"

DELIM=$'\x1f'
FMT=$'%(playlist_title)s\x1f%(title)s\x1f%(uploader)s\x1f%(channel_follower_count)s\x1f%(like_count)s\x1f%(upload_date)s\x1f%(width)s\x1f%(height)s'
IFS=$DELIM read -r PTITLE TITLE CHANNEL SUBS LIKES UPLOAD_DATE QLTYW QLTYH < <(
  yt-dlp -q --no-warnings --print "${FMT}" "${URL}"
)

if [[ "$UPLOAD_DATE" =~ ^[0-9]{8}$ ]]; then
  UPLOAD_DATE_FMT="${UPLOAD_DATE:4:2}-${UPLOAD_DATE:6:2}-${UPLOAD_DATE:0:4}"
else
  UPLOAD_DATE_FMT="${UPLOAD_DATE}"
fi

OPTION_MP3_PLAYLIST="Download An \
  Entire \
  MP3 \
  Playlist"

OPTION_BEST_VIDEO_MKV="Download \
  Video In The \
  Highest \
  Resolution\
  , \
  And \
  Best \
  Audio Available\
  , \
  For The \
  Shared \
  URL"

OPTION_1440_MKV="Download \
  Video \
  In \
  1440p \
  + \
  Best \
  Audio"

OPTION_1080_MKV="Download \
Video \
In \
1080p \
+ \
Best \
Audio"

OPTION_BEST_AUDIO_MP3="Download An \
  MP3 \
  File"

OPT_PLAYLIST_MP3_CMD=(
  yt-dlp
  -f "bestaudio"
  -o "$YT_WRK/%(playlist_title)s/%(title)s - %(uploader)s.mp3"
  -x --audio-format mp3
	--quiet
	--progress
	--embed-thumbnail
	--no-warnings
	--no-check-formats
	--ignore-errors
	"$URL")

OPT_BEST_VIDEO_MKV_CMD=(
  yt-dlp
  -f "bestvideo+bestaudio"
  -o "$YT_WRK/%(uploader)s - %(title)s [%(height)s]{Best-Resolution+Audio}.mkv"
	--progress-template "download:DL:%(progress._percent_str)s ETA:%(progress._eta_str)s Speed:%(progress._speed_str)s"
	--progress
	--no-playlist
	--console-title
	--no-check-formats
	--no-warnings
	--ignore-errors
	--mbed-thumbnail
	--embed-chapters
	--embed-subs
	--merge-output-format mkv
	"$URL")

OPT_TWOK_MKV_CMD=(
  yt-dlp
  -f "bestvideo[height<=1440]+bestaudio/best[height<=1440]"
  -o "$YT_WRK/%(uploader)s - %(title)s [%(height)s].mkv"
	--progress-template "download:DL:%(progress._percent_str)s ETA:%(progress._eta_str)s Speed:%(progress._speed_str)s"
	--progress
	--no-playlist
	--console-title
	--no-check-formats
	--no-warnings
	--ignore-errors
	--embed-thumbnail
	--embed-chapters
	--embed-subs
	--merge-output-format mkv
	"$URL")

OPT_FULL_MKV_CMD=(
  yt-dlp
  -f "bestvideo[height<=1080]+bestaudio/best[height<=1080]"
  -o "$YT_WRK/%(uploader)s - %(title)s [%(height)s].mkv"
	--progress-template "download:DL:%(progress._percent_str)s ETA:%(progress._eta_str)s Speed:%(progress._speed_str)s"
	--progress
	--no-playlist
	--console-title
	--no-check-formats
	--no-warnings
	--ignore-errors
	--embed-thumbnail
	--embed-chapters
	--embed-subs
	--merge-output-format mkv
	"$URL")

OPT_BEST_AUDIO_MP3_CMD=(
  yt-dlp
  -x --audio-format mp3
  -f "bestaudio"
  -o "$YT_WRK/%(uploader)s - %(title)s.mp3"
	--quiet
	--progress
	--ignore-errors
	--console-title
	--no-warnings
	--no-check-formats--progress-template "download:DL:%(progress._percent_str)s ETA:%(progress._eta_str)s Speed:%(progress._speed_str)s"
	"$URL")

DEFAULT="2"

toilet -f smslant -F gay "DL Options"
cowsay -r "$TITLE"
printf "\n\n\n"

printf " ┌─────────────────────────────────────────────────┐\n"
printf " │ [1] 	%s					   │\n" "$OPTION_MP3_PLAYLIST"
printf " ├─────────────────────────────────────────────────┤\n"
printf " │ [2] 	%s					   │\n" "$OPTION_BEST_VIDEO_MKV"
printf " ├─────────────────────────────────────────────────┤\n"
printf " │ [3] 	%s					   │\n" "$OPTION_1440_MKV"
printf " ├─────────────────────────────────────────────────┤\n"
printf " │ [4] 	%s					   │\n" "$OPTION_1080_MKV"
printf " ├─────────────────────────────────────────────────┤\n"
printf " │ [5] 	%s					   │\n" "$OPTION_BEST_AUDIO_MP3"
printf " ├─────────────────────────────────────────────────┤\n"
printf " │ [E] Press [Enter] For Default Option [%d]       │\n" "$DEFAULT"
printf " └─────────────────────────────────────────────────┘\n"
printf "\n\n\n"

printf "┌───Please──Make──Any──Decision───┐\n"
printf "└───>"
read -r -t100 DECISION
clear

DECISION=${DECISION:-$DEFAULT}
printf "\n\n"

printf "┌───Please──Make──Any──Decision───┐\n"
printf "└───>"
read -r -n1 -10
printf "\n"

clear

DECISION=${DECISION:-$DEFAULT}
rc=2
case "${DECISION}" in
  1)
  printf "Downloading Playlist\n"
printf "\n\n\n"

  printf "${VBLU}┌───────────────────────────────────────────────┐\n"
  printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n"
  printf "${VBLU}├───────────────────────────────────────────────┤\n"
  printf "${VBLU}│  ${NONG}──${BWHT}> 📺    ${PNK}Chl${BCYN}:          ${PNK}[${BCYN}$CHANNEL${PNK}]\n"
  printf "${VBLU}│  ${NONG}─-${BWHT}> 🙋    ${PNK}Sbs${BCYN}:          ${PNK}[${BCYN}$SUBS${PNK}]\n"
  printf "${VBLU}│  ${NONG}──${BWHT}> 👍    ${PNK}Lks${BCYN}:          ${PNK}[${BCYN}$LIKES${PNK}]\n"
  printf "${VBLU}│  ${NONG}──${BWHT}> 📆    ${PNK}Upd${BCYN}:          ${PNK}[${BCYN}$UPLOAD_DATE_FMT${PNK}]\n"
  printf "${VBLU}│  ${NONG}──${BWHT}> 📜    ${PNK}Ply${BCYN}:          ${PNK}[${BCYN}$PTITLE${PNK}]\n"
  printf "${VBLU}└───────────────────────────────────────────────┘\n"
printf "\n\n\n"

  printf "       ${VBLU}┌───────────────────────────┐\n"
  printf " ${VBLU}──────┤ ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${PNK}Playlist ${BCYN}Audio${VBLU} ├───────\n"
  printf "       ${VBLU}└───────────────────────────┘\n"
printf "\n"

sleep 2.0
${OPT_PLAYLIST_MP3_CMD[@]}
rc=$?
if [ "$rc" -eq 0 ]; then
  mpv $NFS_HOME/$CMP >/dev/null 2>&1
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  cowsay -r "Your MP3 Playlist Has Downloaded Successfully!"
  sleep 2.0
  mpv $NFS_HOME/$TXS >/dev/null 2>&1
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your Audio Playlist Extract Has Failed Please Try Again\n"
  printf "\n\n"

  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
newd=$(ls -td -- * 2>/dev/null | head -n1)
if [ -n "$newd" ]; then
  mv -- "$newd" "$APIT" >/dev/null 2>&1
  cowsay -r "Your MP3 Playlist Has Been Transferred To Audio_PIT Successfully"
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  sleep 1.0
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your MP3 Playlist Has Failed To Transfer\n"
  printf "\n\n"

  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
fi
;;
  2)
    mpv $NFS_HOME/$MSTART >/dev/null 2>&1
printf "\n\n"

printf " ┌───────────────────────────────────────────────┐\n"
printf " ├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
printf " ├───────────────────────────────────────────────┤\n"
printf " │  ───>  📺   Chl:	[$CHANNEL]\n"
printf " │  ──->  🙋   Sbs:	[$SUBS]\n"
printf " │  ───>  👍   Lks:	[$LIKES]\n"
printf " │  ───>  📹   Res:	[${QLTYW}x${QLTYH}]\n"
printf " │  ───>  📆   Upd:	[$UPLOAD_DATE_FMT]\n"
printf " └───────────────────────────────────────────────┘\n"
printf "\n\n"

printf "       ┌──────────────────────────────────┐\n"
printf " <─────┤ [Downloading]: Best Qlty Vid+Aud ├─────>\n"
printf "       └──────────────────────────────────┘\n"
printf "\n"

sleep 2.0
"${OPT_BEST_VIDEO_MKV_CMD[@]}"
rc=$?
if [ "$rc" -eq 0 ]; then
  mpv $NFS_HOME/$CMP >/dev/null 2>&1
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  cowsay -r "Your MKV File Has Downloaded Successfully"
  sleep 2.0
  mpv $NFS_HOME/$TXS >/dev/null 2>&1
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  clear
fi
newfb=$(ls -t -- *.mkv 2>/dev/null | head -n1)
if [ -n "$newfb" ]; then
  mv -- "$newfb" "$VPIT" >/dev/null 2>&1
  cowsay -r "Your MKV File Has Been Transferred To VPIT Successfully"
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  sleep 1.0
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your MKV File Has Failed To Transfer\n"
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
;;
  3)
mpv $NFS_HOME/$MSTART >/dev/null 2>&1
printf "Downloading $TITLE In 1440p\n"
printf "\n\n"

printf " ┌───────────────────────────────────────────────┐\n"
printf " ├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
printf " ├───────────────────────────────────────────────┤\n"
printf " │  ───>  📺   Chl:	[$CHANNEL]\n"
printf " │  ──->  🙋   Sbs:	[$SUBS]\n"
printf " │  ───>  👍   Lks:	[$LIKES]\n"
printf " │  ───>  📹   Res:	[${QLTYW}x${QLTYH}]\n"
printf " │  ───>  📆   Upd:	[$UPLOAD_DATE_FMT]\n"
printf " └───────────────────────────────────────────────┘\n"
printf "\n\n"

printf "      ┌────────────────────────────────────┐\n"
printf " <────┤ [Running]: 2K MKV Video Resolution ├────>\n"
printf "      └────────────────────────────────────┘\n"
printf "\n\n"

sleep 2.0
"${OPT_TWOK_MKV_CMD[@]}"
rc=$?
if [ "$rc" -eq 0 ]; then
  mpv $NFS_HOME/$CMP >/dev/null 2>&1
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  cowsay -r "Your MKV File Has Downloaded Successfully!"
  sleep 2.0
  mpv $NFS_HOME/$TXS >/dev/null 2>&1
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your Video Download Has Failed To Download.\nPlease Try Again At A Different Time.\n"
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
newft=$(ls -t -- *.mkv 2>/dev/null | head -n1)
if [ -n "$newft" ]; then
  mv -- "$newft" "$VPIT" >/dev/null 2>&1
  cowsay -r"Your MKV File Has Been Transferred To VPIT, Successfully!"
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  sleep 1.0
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your MKV File Has Failed To Transfer/n"
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
;;
  4)
mpv $NFS_HOME/$MSTART >/dev/null 2>&1
printf "Downloading\n$TITLE\nIn 1080p\n"
printf "\n\n"

printf "┌───────────────────────────────────────────────┐\n"
printf "├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
printf "├───────────────────────────────────────────────┤\n"
printf "│  ───>  📺   Chl:	[$CHANNEL]\n"
printf "│  ──->  🙋   Sbs:	[$SUBS]\n"
printf "│  ───>  👍   Lks:	[$LIKES]\n"
printf "│  ───>  📹   Res:	[${QLTYW}x${QLTYH}]\n"
printf "│  ───>  📆   Upd:	[$UPLOAD_DATE_FMT]\n"
printf "└───────────────────────────────────────────────┘\n"
printf "\n\n"

printf "         ┌───────────────────────────────┐\n"
printf " <───────┤  [Running]:1080p Video+Audio  ├───────>\n"
printf "         └───────────────────────────────┘\n"
printf "\n\n"

sleep 2.0
"${OPT_FULL_MKV_CMD[@]}"
rc=$?
if [ "$rc" -eq 0 ]; then
  mpv $NFS_HOME/$CMP >/dev/null 2>&1
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  cowsay -r "Your MKV File Has Downloaded Successfully"
  sleep 2.0
  mpv $NFS_HOME/$TXS >/dev/null 2>&1
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your Video Download Has Failed\nPlease Try Again Sometime In The Far\nFar Future So I Am Not Here For It\n"
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
newfm=$(ls -t -- *.mkv 2>/dev/null | head -n1)
if [ -n "$newfm" ]; then
  mv -- "$newfm" "$VPIT" >/dev/null 2>&1
  cowsay -r "Your MKV File Has Been Transferred To Video_PIT Successfully"
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  sleep 1.0
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
else
  mpv "$NFS_HOME/$MFGTA" >/dev/null 2>&1
  printf "Your MKV File Has Failed To Transfer\n"
  printf "\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
;;
  5)
printf "Downloading $TITLE In 1080p\n"
printf "\n\n"

printf "${VBLU}┌───────────────────────────────────────────────┐\n"
printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n"
printf "${VBLU}├───────────────────────────────────────────────┤\n"
printf "${VBLU}│  ${NONG}──${BWHT}> 📺    ${PNK}Chl${BCYN}:          ${PNK}[${BCYN}$CHANNEL${PNK}]\n"
printf "${VBLU}│  ${NONG}─-${BWHT}> 🙋    ${PNK}Sbs${BCYN}:          ${PNK}[${BCYN}$SUBS${PNK}]\n"
printf "${VBLU}│  ${NONG}──${BWHT}> 👍    ${PNK}Lks${BCYN}:          ${PNK}[${BCYN}$LIKES${PNK}]\n"
printf "${VBLU}│  ${NONG}─-${BWHT}> 📹    ${PNK}Res${BCYN}:          ${PNK}[${BCYN}$QLTYW${PNK}x${BCYN}$QLTYH${PNK}]\n"
printf "${VBLU}│  ${NONG}──${BWHT}> 📆    ${PNK}Upd${BCYN}:          ${PNK}[${BCYN}$UPLOAD_DATE_FMT${PNK}]\n"
printf "${VBLU}└───────────────────────────────────────────────┘\n"
printf "\n"

printf "       ${VBLU}┌───────────────────────────┐\n"
printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${PNK}Best ${BCYN}Audio${VBLU}    ├───────\n"
printf "       ${VBLU}└───────────────────────────┘\n"
printf "\n\n"

sleep 2.0
"${OPT_BEST_AUDIO_MP3_CMD[@]}"
rc=$?
if [ "$rc" -eq 0 ]; then
  mpv $NFS_HOME/$CMP >/dev/null 2>&1
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  cowsay -r "Your MP3 File Has Downloaded Successfully!"
  sleep 2.0
  mpv $NFS_HOME/$TXS >/dev/null 2>&1
  clear
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your Audio File Extract Has Failed, Please Try Again\n"
  printf "\n"
  printf "\n\n"

  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
  clear
fi
freshf=$(ls -t -- *.mp3 2>/dev/null | head -n1)
if [ -n "$freshf" ]; then
  mv -- "$freshf" "$APIT" >/dev/null 2>&1
  cowsay -f cube "Your MP3 File Has Been Transferred To APIT, Successfully!"
  mpv $NFS_HOME/$FHS >/dev/null 2>&1
  sleep 1.0
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
else
  mpv $NFS_HOME/$MFGTA >/dev/null 2>&1
  printf "Your MP3 File Has Failed To Transfer\n"
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -10
fi
;;
  *)
rc=2
  printf "┌───Please──Make──Any──Decision───┐\n"
  printf "└───>"
  read -r -n1 -t 60
;;
esac
