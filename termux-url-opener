#!/data/data/com.termux/files/usr/bin/bash
# Project name : Fam-Hacker-Pit-Kit
# Coded by: tthatgguy1 (You dont become a coder by just changing the credits
# Github: https://github.com/tthatgguy1/Fam-Hacker-Pit-Kit
# Date : 12/04/2024
# Updated 09/09/2025
URL="$1"
                 # <───── Directory Escapes ─────> #
NFS_HOME="$HOME/storage/shared/Fam-Hacker-Pit-Kit" # ${NFS_HOME}
YT_VIDEO_PIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Video-Pit" # ${YT_VIDEO_PIT}
YT_AUDIO_PIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Audio-Pit" # ${YT_AUDIO_PIT}
YouTube_Work="$HOME/downloads" # ${YouTube_Work}

                 # <───── Sound Effect Escsapes ─────> #
TXS="/.NFS-Data/sfx/TXS.mp3"        # ${TXS}
MSTART="/.NFS-Data/sfx/MDLD.mp3"    # ${MSTART}
CMP="/.NFS-Data/sfx/c.mp3"          # ${CMP}
MDATA="/.NFS-Data/sfx/MDATA.mp3"    # ${MDATA}
FHS="/.NFS-Data/sfx/FHS.mp3"        # ${FHS}
TB="/.NFS-Data/sfx/TB.mp3"          # ${TB}
MFGTA="/.NFS-Data/sfx/MFGTA.mp3"    # ${MFGTA}
SKL="/.NFS-Data/sfx/SKL.mp3"        # ${SKL}
MUSIC_SLAVE="mpv"                   # ${MUSIC_SLAVE}

                   # <───── Color Setup ─────> #
ESC=$'\e'
GRN="${ESC}[38;2;51;255;0m"       # ${GRN}   $GRN  - Lime Green
PNK="${ESC}[38;2;255;16;240m"     # ${PNK}   $PNK  - Bright Magenta
BLU="${ESC}[38;2;0;102;255m"      # ${BLU}   $BLU  - Medium Blue
BONG="${ESC}[38;2;255;140;0m"     # ${BONG}  $BONG - Pumpkin Orange
NONG="${ESC}[38;2;255;95;0m"      # ${NONG}  $NONG - Neon Orange

BCYN="${ESC}[38;2;0;255;255m"     # ${BCYN}  $BCYN - Cyan
ACID="${ESC}[38;2;204;255;0m"     # ${ACID}  $ACID - Acid Green
VBLU="${ESC}[38;2;138;43;226m"    # ${VBLU}  $VBLU - Violet Blue
NPPL="${ESC}[38;2;188;19;254m"    # ${NPPL}  $NPPL - Neon Purple
BWHT="${ESC}[38;2;255;255;255m"   # ${BWHT}  #BWHT - Bright White
RESET="${ESC}[0m"                 # ${RESET} $RESET

		    # <───── Redirect Termux ─────> #
cd $YouTube_Work
		     # <───── Intro Banner ─────> #
echo " "
toilet -o -f smslant -F metal "Fam-Hacker"
echo " "
  cowsay -r "Welcome To Fam-Hacker Tube Client, Written By Nah-Fam_Studios (Seth J. Nelson). This Script Will Download Any Shared YouTube URL to Termux."
    "${MUSIC_SLAVE}" "${NFS_HOME}/${SKL}" >/dev/null 2>&1
#    "${MUSIC_SLAVE}" "${NFS_HOME}/${YTSU}" >/dev/null 2>&1 # 57
sleep 2.0
    "${MUSIC_SLAVE}" "${NFS_HOME}/${MDATA}" >/dev/null 2>&1

		    # <───── Channel Strings ─────> #
RETARD=$'\x1f'
FMT=$'%(playlist_title)s\x1f%(title)s\x1f%(uploader)s\x1f%(channel_follower_count)s\x1f%(like_count)s\x1f%(upload_date)s\x1f%(width)s\x1f%(height)s'
IFS=$RETARD read -r PTITLE TITLE CHANNEL SUBS LIKES UPLOAD_DATE QLTYW QLTYH < <(
  yt-dlp -q --no-warnings --print "$FMT" "$URL"
)
	       # <───── Upload Date Format To US Engish ─────> #
if [[ "$UPLOAD_DATE" =~ ^[0-9]{8}$ ]]; then
  UPLOAD_DATE_FMT="${BCYN}${UPLOAD_DATE:4:2}${RESET}${PNK}-${RESET}${BCYN}${UPLOAD_DATE:6:2}${RESET}${PNK}-${RESET}${BCYN}${UPLOAD_DATE:0:4}${RESET}"
else
  UPLOAD_DATE_FMT="${UPLOAD_DATE}"
fi

                    # <───── Download Options ─────> #
OPTION_BEST_VIDEO_MKV="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In the${RESET} \
${BCYN}Best${RESET} \
${VBLU}Quality${RESET}\
${PNK}.${RESET}"

OPTION_1440_MKV="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In${RESET} \
${BCYN}1440p${RESET} \
${PNK}+${RESET} \
${BCYN}Best${RESET} \
${VBLU}Audio${RESET}\
${PNK}.${RESET}"

OPTION_1080_MKV="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In${RESET} \
${BCYN}1080p${RESET} \
${PNK}+${RESET} \
${BCYN}Best${RESET} \
${VBLU}Audio${RESET}\
${PNK}.${RESET}"

OPTION_BEST_AUDIO_MP3="${VBLU}Extract${RESET} \
${PNK}&${RESET} \
${VBLU}Download${RESET} \
${VBLU}An${RESET} \
${BCYN}Audio${RESET} \
${PNK}MP3${RESET} \
${VBLU}File${RESET}\
${PNK}.${RESET}"

OPTION_MP3_PLAYLIST="${VBLU}Extract${RESET} \
${PNK}&${RESET} \
${VBLU}Download${RESET} \
${PNK}MP3${RESET} \
${VBLU}Playlist${RESET}\
${PNK}.${RESET}"

OPTION_QUIT="${BWHT}[${NONG}Quit${BWHT}]${RESET}"

                 # <───── Download Options Comand ─────> #

# Best available video+audio, merged to MKV
OPT_BEST_VIDEO_MKV_CMD=(
  yt-dlp
    -f "bestvideo+bestaudio"
    -o "${YouTube_Work}/%(uploader)s - %(title)s [%(height)sp]{Best-Resolution+Audio}.mkv"
	  --no-playlist
	  --progress --quiet
	  --console-title --no-warnings
	  --merge-output-format mkv
	  --embed-thumbnail --embed-chapters
	  --embed-subs --no-check-formats
	  --progress-template "download: ${PNK}DL${BCYN}:%(progress._percent_str)s ${PNK}ETA${BCYN}: %(progress._eta_str)s ${PNK}Speed${BCYN}:%(progress._speed_str)s"
	  "$URL"
)

# Cap at 1440p
OPT_1440_MKV_CMD=(
  yt-dlp
    -f "bestvideo[height<=1440]+bestaudio/best[height<=1440]"
    -o "${YouTube_Work}/%(uploader)s - %(title)s [%(height)sp].mkv"
	  --no-playlist
	  --progress --quiet
	  --console-title --no-warnings
	  --merge-output-format mkv
	  --embed-thumbnail --embed-chapters
	  --embed-subs --no-check-formats
	  --progress-template "download: ${PNK}DL${BCYN}:%(progress._percent_str)s ${PNK}ETA${BCYN}: %(progress._eta_str)s ${PNK}Speed${BCYN}:%(progress._speed_str)s"
	  "$URL"
)

# Cap at 1080p
OPT_1080_MKV_CMD=(
  yt-dlp
    -f "bestvideo[height<=1080]+bestaudio/best[height<=1080]"
    -o "${YouTube_Work}/%(uploader)s - %(title)s [%(height)sp].mkv"
	  --no-playlist
	  --progress --quiet
	  --console-title --no-warnings
	  --merge-output-format mkv
	  --embed-thumbnail --embed-chapters
	  --embed-subs --no-check-formats
	  --progress-template "download: ${PNK}DL${BCYN}:%(progress._percent_str)s ${PNK}ETA${BCYN}: %(progress._eta_str)s ${PNK}Speed${BCYN}:%(progress._speed_str)s"
	  "$URL"
)

# Best audio → MP3 (extract)
OPT_BEST_AUDIO_MP3_CMD=(
  yt-dlp
    -x --audio-format mp3
    -f "bestaudio"
    -o "${YouTube_Work}/%(uploader)s - %(title)s.mp3"
	  --no-playlist
	  --progress --quiet
	  --console-title --no-warnings
	  --no-check-formats
	  --progress-template "download: ${PNK}DL${BCYN}:%(progress._percent_str)s ${PNK}ETA${BCYN}: %(progress._eta_str)s ${PNK}Speed${BCYN}:%(progress._speed_str)s"
	  "$URL"
)

# Playlist → MP3s in a folder named after the playlist
OPT_PLAYLIST_MP3_CMD=(
  yt-dlp
    -x --audio-format mp3
    -f "bestaudio"
    -o "${YouTube_Work}/%(playlist_title)s/%(uploader)s - %(title)s.%(ext)s"
	    --yes-playlist
	    --quiet
	    --no-warnings
	    --no-check-formats
	    --ignore-errors
	    "$URL"
)

OPT_QUIT_CMD=(exit)
DEFAULT="5"
clear

    echo " "
      toilet -f smslant -F gay "DL Options"
      cowsay -f stan "$TITLE"
    echo " "
    echo " "
    echo " "
	printf "${VBLU}┌─────────────────────────────────────────────────┐\n${RESET}"
	printf "${VBLU}│ ${PNK}[${BCYN}1${PNK}] %s       ${VBLU}│\n" "$OPTION_BEST_VIDEO_MKV"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${PNK}[${BCYN}2${PNK}] %s       ${VBLU}│\n" "$OPTION_1440_MKV"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${PNK}[${BCYN}3${PNK}] %s       ${VBLU}│\n" "$OPTION_1080_MKV"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${PNK}[${BCYN}4${PNK}] %s       ${VBLU}│\n" "$OPTION_BEST_AUDIO_MP3"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${PNK}[${BCYN}5${PNK}] %s       ${VBLU}│\n" "$OPTION_MP3_PLAYLIST"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${ACID}[${PNK}6${ACID}] %s                                      ${VBLU}│\n" "$OPTION_QUIT"
	printf "${VBLU}├─────────────────────────────────────────────────┤\n"
	printf "${VBLU}│ ${PNK}[${BCYN}E${PNK}] ${VBLU}Press ${BWHT}[${NONG}Enter${BWHT}] ${VBLU}For Default Option ${BWHT}[${NONG}%d${BWHT}]${RESET}     ${VBLU}│\n" "$DEFAULT"
	printf "${VBLU}└─────────────────────────────────────────────────┘\n"
    echo " "
    echo " "
  printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Make${VBLU}─${PNK}Any${VBLU}─${BCYN}Decision${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
  read -r -t120 DECISION
clear

  DECISION=${DECISION:-$DEFAULT}
  rc=2
  case "${DECISION}" in
  echo " "
1)
  date +"%l:%M:%S %p"
  "${MUSIC_SLAVE}" "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
  cowsay -r "$TITLE"
    echo " "
	printf "${VBLU}┌───────────────────────────────────────────────┐\n${RESET}"
    	printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n${RESET}"
    	printf "${VBLU}├───────────────────────────────────────────────┤\n${RESET}"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📺    ${PNK}Chl${BCYN}:          ${PNK}[${BCYN}${CHANNEL}${PNK}]${RESET}\n"
	printf "${VBLU}│  ${NONG}─-${BWHT}> 🙋    ${PNK}Sbs${BCYN}:          ${PNK}[${BCYN}${SUBS}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 👍    ${PNK}Lks${BCYN}:          ${PNK}[${BCYN}${LIKES}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}─-${BWHT}> 📹    ${PNK}Res${BCYN}:          ${PNK}[${BCYN}${QLTYW}${PNK}x${BCYN}${QLTYH}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📆    ${PNK}Upd${BCYN}:          ${PNK}[${BCYN}${UPLOAD_DATE_FMT}${RESET}${PNK}]${RESET}\n"
    	printf "${VBLU}└───────────────────────────────────────────────┘${RESET}\n"

    echo " "
    echo " "
    	printf "       ${VBLU}┌───────────────────────────────┐\n"
    	printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${PNK}Best ${BCYN}Video${PNK}+${BCYN}Audio${VBLU}  ├───────${RESET}\n"
    	printf "       ${VBLU}└───────────────────────────────┘\n"
    sleep 2.0
      		           # <───── Actual YT-DLP Command ─────> #
    "${OPT_BEST_VIDEO_MKV_CMD[@]}"
	rc=$?
		         # <───── Fail Safe Download Status ─────> #
  if [ "$rc" -eq 0 ]; then
      "${MUSIC_SLAVE}" "${NFS_HOME}/${CMP}" >/dev/null 2>&1
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
    cowsay -r "Your MKV File Has Downloaded Successfully!"
    sleep 2.0
      "${MUSIC_SLAVE}" "${NFS_HOME}/${TXS}" >/dev/null 2>&1
      clear
    else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    cowsay -r "Your Video Download Has Failed, Please Try Again."
      printf "${NONG}┌──${BWHT}Please${NONG}─${BWHT}Press${NONG}─${BWHT}Any${NONG}─${BWHT}Button${NONG}──┐${RESET}\n${NONG}└─${GRN}>${BWHT}:${RESET} "
      read -n1 -r -t3
    clear
    fi
	 	      # <───── Fail Safe File Transfer Status ─────> #
    FRESH_BESTIE=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "${FRESH_BESTIE}" ]; then
    mv -- "${FRESH_BESTIE}" "$YT_VIDEO_PIT" >/dev/null 2>&1
    cowsay -f cube "Your MKV File Has Been Transferred To YT_VIDEO_PIT, Successfully!"
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
    sleep 1.0
      printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Press${VBLU}─${PNK}Any${VBLU}─${BCYN}Button${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
      read -n1 -r -t3
    clear
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    cowsay -r "Your MKV File Has Failed To Transfer"
      echo " "
      printf "${BWHT}┌──${NONG}Please${BWHT}─${NONG}Press${BWHT}─${NONG}Any${BWHT}─${NONG}Button${BWHT}──┐${RESET}\n${BWHT}└─${NONG}>${GRN}:${RESET} "
      read -n1 -r -t5
    clear
  fi
  ;;
2)
  date +"%l:%M:%S %p"
  "${MUSIC_SLAVE}" "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
  echo " "
   cowsay -r "$TITLE"
  echo " "
  echo " "
	printf "${VBLU}┌───────────────────────────────────────────────┐\n${RESET}"
    	printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n${RESET}"
    	printf "${VBLU}├───────────────────────────────────────────────┤\n${RESET}"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📺    ${PNK}Chl${BCYN}:          ${PNK}[${BCYN}${CHANNEL}${PNK}]${RESET}\n"
	printf "${VBLU}│  ${NONG}─-${BWHT}> 🙋    ${PNK}Sbs${BCYN}:          ${PNK}[${BCYN}${SUBS}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 👍    ${PNK}Lks${BCYN}:          ${PNK}[${BCYN}${LIKES}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}─-${BWHT}> 📹    ${PNK}Res${BCYN}:          ${PNK}[${BCYN}${QLTYW}${PNK}x${BCYN}${QLTYH}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📆    ${PNK}Upd${BCYN}:          ${PNK}[${BCYN}${UPLOAD_DATE_FMT}${RESET}${PNK}]${RESET}\n"
    	printf "${VBLU}└───────────────────────────────────────────────┘${RESET}\n"

   echo " "
   echo " "
        printf "       ${VBLU}┌───────────────────────────────┐\n"
        printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${BCYN}1440${PNK}p ${BCYN}Video${PNK}+${BCYN}Audio${VBLU} ├───────${RESET}\n"
        printf "       ${VBLU}└───────────────────────────────┘\n"
   sleep 2.0
   "${OPT_1440_MKV_CMD[@]}"
	rc=$?
    if [ "$rc" -eq 0 ]; then
      "${MUSIC_SLAVE}" "${NFS_HOME}/${CMP}" >/dev/null 2>&1
       "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Downloaded Successfully!"
	sleep 2.0
       "${MUSIC_SLAVE}" "${NFS_HOME}/${TXS}" >/dev/null 2>&1
	clear
    else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      cowsay -r "Your Video Download Has Failed, Please Try Again."
        echo " "
        printf "${BWHT}┌──${NONG}Please${BWHT}─${NONG}Press${BWHT}─${NONG}Any${BWHT}─${NONG}Button${BWHT}──┐${RESET}\n${BWHT}└─${NONG}>${GRN}:${RESET} "
        read -n1 -r -t5
	clear
    fi
    FRESH_1440=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "${FRESH_1440}" ]; then
    mv -- "${FRESH_1440}" "$YT_VIDEO_PIT" >/dev/null 2>&1
    cowsay -f cube "Your MKV File Has Been Transferred To YT_VIDEO_PIT, Successfully!"
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
    sleep 1.0
      printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Press${VBLU}─${PNK}Any${VBLU}─${BCYN}Button${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
      read -n1 -r -t3
    clear
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    cowsay -r "Your MKV File Has Failed To Transfer"
      echo " "
      printf "${BWHT}┌──${NONG}Please${BWHT}─${NONG}Press${BWHT}─${NONG}Any${BWHT}─${NONG}Button${BWHT}──┐${RESET}\n${BWHT}└─${NONG}>${GRN}:${RESET} "
      read -n1 -r -t5
    clear
  fi
  ;;
3)
  date +"%l:%M:%S %p"
  "${MUSIC_SLAVE}" "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
  echo " "
   cowsay -r "$TITLE"
  echo " "
  echo " "
	printf "${VBLU}┌───────────────────────────────────────────────┐\n${RESET}"
    	printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n${RESET}"
    	printf "${VBLU}├───────────────────────────────────────────────┤\n${RESET}"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📺    ${PNK}Chl${BCYN}:          ${PNK}[${BCYN}${CHANNEL}${PNK}]${RESET}\n"
	printf "${VBLU}│  ${NONG}─-${BWHT}> 🙋    ${PNK}Sbs${BCYN}:          ${PNK}[${BCYN}${SUBS}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 👍    ${PNK}Lks${BCYN}:          ${PNK}[${BCYN}${LIKES}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}─-${BWHT}> 📹    ${PNK}Res${BCYN}:          ${PNK}[${BCYN}${QLTYW}${PNK}x${BCYN}${QLTYH}${PNK}]${RESET}\n"
    	printf "${VBLU}│  ${NONG}──${BWHT}> 📆    ${PNK}Upd${BCYN}:          ${PNK}[${BCYN}${UPLOAD_DATE_FMT}${RESET}${PNK}]${RESET}\n"
    	printf "${VBLU}└───────────────────────────────────────────────┘${RESET}\n"

   echo " "
   echo " "
        printf "       ${VBLU}┌───────────────────────────────┐\n"
        printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${BCYN}1080${PNK}p ${BCYN}Video${PNK}+${BCYN}Audio${VBLU} ├───────${RESET}\n"
        printf "       ${VBLU}└───────────────────────────────┘\n"
   sleep 2.0
   "${OPT_1080_MKV_CMD[@]}"
	rc=$?
  if [ "$rc" -eq 0 ]; then
      "${MUSIC_SLAVE}" "${NFS_HOME}/${CMP}" >/dev/null 2>&1
       "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Downloaded Successfully!"
	sleep 2.0
       "${MUSIC_SLAVE}" "${NFS_HOME}/${TXS}" >/dev/null 2>&1
	clear
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      cowsay -r "Your Video Download Has Failed, Please Try Again."
        echo " "
        printf "${BWHT}┌──${NONG}Please${BWHT}─${NONG}Press${BWHT}─${NONG}Any${BWHT}─${NONG}Button${BWHT}──┐${RESET}\n${BWHT}└─${NONG}>${GRN}:${RESET} "
        read -n1 -r -t5
	clear
  fi
    FRESH_1080=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "${FRESH_1080}" ]; then
    mv -- "${FRESH_1080}" "$YT_VIDEO_PIT" >/dev/null 2>&1
    cowsay -f cube "Your MKV File Has Been Transferred To YT_VIDEO_PIT, Successfully!"
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
    sleep 1.0
      printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Press${VBLU}─${PNK}Any${VBLU}─${BCYN}Button${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
      read -n1 -r -t3
    clear
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    cowsay -r "Your MKV File Has Failed To Transfer"
      echo " "
      printf "${BWHT}┌──${NONG}Please${BWHT}─${NONG}Press${BWHT}─${NONG}Any${BWHT}─${NONG}Button${BWHT}──┐${RESET}\n${BWHT}└─${NONG}>${GRN}:${RESET} "
      read -n1 -r -t5
    clear
  fi
  ;;
4)
date +"%l:%M:%S %p"
  echo " "
    cowsay -r "$TITLE"
  echo " "
    printf "${VBLU}┌───────────────────────────────────────────────┐\n${RESET}"
    printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n${RESET}"
    printf "${VBLU}├───────────────────────────────────────────────┤\n${RESET}"
    printf "${VBLU}│  ${BCYN}──${PNK}> 📺    ${PNK}Chl${BCYN}:     ${PNK}[${BCYN}${CHANNEL}${PNK}]${RESET}\n"
    printf "${VBLU}│  ${BCYN}─-${PNK}> 🙋    ${PNK}Sbs${BCYN}:     ${PNK}[${BCYN}${SUBS}${PNK}]${RESET}\n"
    printf "${VBLU}│  ${BCYN}──${PNK}> 👍    ${PNK}Lks${BCYN}:     ${PNK}[${BCYN}${LIKES}${PNK}]${RESET}\n"
    printf "${VBLU}│  ${BCYN}──${PNK}> 📆    ${PNK}Upd${BCYN}:     ${PNK}[${BCYN}${UPLOAD_DATE_FMT}${RESET}${PNK}]${RESET}\n"
    printf "${VBLU}└───────────────────────────────────────────────┘${RESET}\n"
  echo " "
  echo " "
    printf "       ${VBLU}┌───────────────────────────┐\n"
    printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${PNK}Best ${BCYN}Audio${VBLU}    ├───────${RESET}\n"
    printf "       ${VBLU}└───────────────────────────┘\n"
  sleep 2.0
    "${OPT_BEST_AUDIO_MP3_CMD[@]}"
	rc=$?
  if [ "$rc" -eq 0 ]; then
      "${MUSIC_SLAVE}" "${NFS_HOME}/${CMP}" >/dev/null 2>&1
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      cowsay -r "Your MP3 File Has Downloaded Successfully!"
      sleep 2.0
      "${MUSIC_SLAVE}" "${NFS_HOME}/${TXS}" >/dev/null 2>&1
      clear
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      cowsay -r "Your Audio File Extract Has Failed, Please Try Again"
      printf "${BCYN}┌──${PNK}Please${BCYN}─${PNK}Press${BCYN}─${PNK}Any${BCYN}─${PNK}Button${BCYN}──┐${RESET}\n${BCYN}└─${PNK}>${PNK}:${RESET} "
      read -n1 -r
      clear
  fi
                        # <───── Fail Safe File Transfer Status ─────>
  FRESH_EARS=$(ls -t -- *.mp3 2>/dev/null | head -n1)
  if [ -n "${FRESH_EARS}" ]; then
      mv -- "${FRESH_EARS}" "$YT_AUDIO_PIT" >/dev/null 2>&1
      cowsay -f cube "Your MP3 File Has Been Transferred To YT_AUDIO_PIT, Successfully!"
       "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      sleep 1.0
      printf "${BCYN}┌──${PNK}Please${BCYN}─${PNK}Press${BCYN}─${PNK}Any${BCYN}─${PNK}Button${BCYN}──┐${RESET}\n${BCYN}└─${PNK}>${PNK}:${RESET} "
      read -n1 -r -t3
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      cowsay -r "Your MP3 File Has Failed To Transfer"
      printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Press${VBLU}─${PNK}Any${VBLU}─${BCYN}Button${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
      read -n1 -r -t3
  fi
  ;;
5)
  date +"%l:%M:%S %p"
  echo " "
    cowsay -r "Downloading Playlist"
  echo " "
      printf "${VBLU}┌───────────────────────────────────────────────┐\n${RESET}"
      printf "${VBLU}├────────────👽─${PNK}[${BCYN}Nah${VBLU}─${BCYN}Fam${VBLU}─${BCYN}Studios${PNK}]${VBLU}─👽────────────${VBLU}┤\n${RESET}"
      printf "${VBLU}├───────────────────────────────────────────────┤\n${RESET}"
      printf "${VBLU}│  ${BCYN}──${PNK}> 📺    ${PNK}Chl${BCYN}:   ${PNK}[${BCYN}$CHANNEL${PNK}]${RESET}\n"
      printf "${VBLU}│  ${BCYN}─-${PNK}> 🙋    ${PNK}Sbs${BCYN}:   ${PNK}[${BCYN}$SUBS${PNK}]${RESET}\n"
      printf "${VBLU}│  ${BCYN}──${PNK}> 👍    ${PNK}Lks${BCYN}:   ${PNK}[${BCYN}$LIKES${PNK}]${RESET}\n"
      printf "${VBLU}│  ${BCYN}──${PNK}> 🎴    ${PNK}Pyl${BCYN}:   ${PNK}[${BCYN}$PTITLE${PNK}]${RESET}\n"
      printf "${VBLU}│  ${BCYN}──${PNK}> 📆    ${PNK}Upd${BCYN}:   ${PNK}[${BCYN}$UPLOAD_DATE_FMT${RESET}${PNK}]${RESET}\n"
      printf "${VBLU}└───────────────────────────────────────────────┘${RESET}\n"
  echo " "
  echo " "
      printf "       ${VBLU}┌───────────────────────────┐\n"
      printf " ${VBLU}──────┤  ${BWHT}[${NONG}Running${BWHT}]${GRN}: ${PNK}Playlist ${BCYN}Audio${VBLU}    ├───────${RESET}\n"
      printf "       ${VBLU}└───────────────────────────┘\n"
  sleep 2.0
    "${OPT_PLAYLIST_MP3_CMD[@]}"
	rc=$?
  if [ "$rc" -eq 0 ]; then
    "${MUSIC_SLAVE}" "${NFS_HOME}/${CMP}" >/dev/null 2>&1
    "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      cowsay -r "Your MP3 Playlist Has Downloaded Successfully!"
      sleep 2.0
    "${MUSIC_SLAVE}" "${NFS_HOME}/${TXS}" >/dev/null 2>&1
      clear
  else
    "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      cowsay -r "Your Audio Playlist Extract Has Failed, Please Try Again."
    printf "${BCYN}┌──${PNK}Please${BCYN}─${PNK}Press${BCYN}─${PNK}Any${BCYN}─${PNK}Button${BCYN}──┐${RESET}\n${BCYN}└─${PNK}>${PNK}:${RESET} "
    read -n1 -r
      clear
  fi
    echo " "
    FRESH_DIR=$(ls -td -- * 2>/dev/null | head -n1)
  if [ -n "${FRESH_DIR}" ]; then
    mv -- "${FRESH_DIR}" "$YT_AUDIO_PIT" >/dev/null 2>&1
    cowsay -f cube "Your MP3 Playlist Has Been Transferred To YT_AUDIO_PIT, Successfully!"
      "${MUSIC_SLAVE}" "${NFS_HOME}/${FHS}" >/dev/null 2>&1
    sleep 1.0
      printf "${BCYN}┌──${PNK}Please${BCYN}─${PNK}Press${BCYN}─${PNK}Any${BCYN}─${PNK}Button${BCYN}──┐${RESET}\n${BCYN}└─${PNK}>${PNK}:${RESET} "
      read -n1 -r -t3
  else
      "${MUSIC_SLAVE}" "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    cowsay -r "Your MP3 Playlist Has Failed To Transfer"
      printf "${VBLU}┌──${BCYN}Please${VBLU}─${BCYN}Press${VBLU}─${PNK}Any${VBLU}─${BCYN}Button${VBLU}──┐${RESET}\n${VBLU}└─${BCYN}>${PNK}:${RESET} "
      read -n1 -r -t3
  fi
  ;;

6)
   "${OPT_QUIT_CMD[@]}";
   rc=$?
  ;;

*)
   rc=2
      printf "${BCYN}┌──${PNK}Please${BCYN}─${PNK}Press${BCYN}─${PNK}Any${BCYN}─${PNK}Button${BCYN}──┐${RESET}\n ${BCYN}└─${PNK}>${PNK}: "
      read -r -t60
;;
esac
