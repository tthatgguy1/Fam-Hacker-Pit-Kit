#!/data/data/com.termux/files/usr/bin/bash
# Project Name: Fam-Hacker-Pit-Kit
# Coded by: tthatgguy1 (You dont become a coder by just changing the credits
# Github: https://github.com/tthatgguy1/Fam-Hacker-Pit-Kit
# Date : 12/04/2024
# Updated 09/09/2025

URL="$1"

ESC=$'\e'
NGRN="${ESC}[38;2;51;255;0m"      # ${NGRN}  $NGRN - Lime Green
BMGT="${ESC}[38;2;255;16;240m"    # ${BMGT}  $BMGT - Bright Magenta
NONG="${ESC}[38;2;255;95;0m"      # ${NONG}  $NONG - Neon Orange
BCYN="${ESC}[38;2;0;255;255m"     # ${BCYN}  $BCYN - Cyan
ACID="${ESC}[38;2;204;255;0m"     # ${ACID}  $ACID - Acid Green
VBLU="${ESC}[38;2;138;43;226m"    # ${VBLU}  $VBLU - Violet Blue
MMDB="${ESC}[38;2;25;25;112m"     # ${MMDB}  $MMDB - Midnight Blue
NPPL="${ESC}[38;2;188;19;254m"    # ${NPPL}  $NPPL - Neon Purple
BWHT="${ESC}[38;2;255;255;255m"   # ${BWHT}  #BWHT - Bright White
RESET="${ESC}[0m"                 # ${RESET} $RESET

YT_WRK="$HOME/downloads" 	                                 # ${YT_WRK}
NFS_HOME="$HOME/storage/shared/Fam-Hacker-Pit-Kit"               # ${NFS_HOME}
VPIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Video-Pit" # ${VPIT}
APIT="$HOME/storage/shared/Fam-Hacker-Pit-Kit/YouTube-Audio-Pit" # ${APIT}

TXS="/.NFS-Data/sfx/TXS.mp3"        # ${TXS}
MSTART="/.NFS-Data/sfx/MDLD.mp3"    # ${MSTART}
CMP="/.NFS-Data/sfx/c.mp3"          # ${CMP}
MDATA="/.NFS-Data/sfx/MDATA.mp3"    # ${MDATA}
FHS="/.NFS-Data/sfx/FHS.mp3"        # ${FHS}
MFGTA="/.NFS-Data/sfx/MFGTA.mp3"    # ${MFGTA}
SKL="/.NFS-Data/sfx/SKL.mp3"        # ${SKL}

cd downloads
printf "\n\n"

toilet -f smslant -F metal "Fam-Hacker"
  printf "\n"
  printf "Welcome To Fam-Hacker Tube Client\nWritten By Nah-Fam_Studios (Seth J. Nelson)\nThis Script Will Download Any YouTube URL\nThat Is Shared To Termux\n"
  printf "The Script Will Take About 30 Seconds To\nGather Meta-Data From The URL\nDownloading\n$TITLE\nIn Best Available Resolution\nPlease Stand By\n"
  printf "\n"
mpv $NFS_HOME/$SKL >/dev/null 2>&1
mpv $NFS_HOME/$MDATA >/dev/null 2>&1
DELIM=$'\x1f'
FMT=$'%(playlist_title)s\x1f%(title)s\x1f%(uploader)s\x1f%(channel_follower_count)s\x1f%(like_count)s\x1f%(upload_date)s\x1f%(width)s\x1f%(height)s'
IFS=$DELIM read -r PTITLE TITLE CHANNEL SUBS LIKES UPLOAD_DATE QLTYW QLTYH < <(
    yt-dlp -q --no-warnings --print "${FMT}" "${URL}"
)

  if [[ "$UPLOAD_DATE" =~ ^[0-9]{8}$ ]]; then
    UPLOAD_DATE_FMT="${UPLOAD_DATE:4:2}-${UPLOAD_DATE:6:2}-${UPLOAD_DATE:0:4}"
  else
    UPLOAD_DATE_FMT="${UPLOAD_DATE}"
  fi

OPTION_MP3LST="${VBLU}Download An Entire${RESET} \
${BCYN}MP3${RESET} \
${VBLU}Playlist${RESET}"

OPTION_BMKV="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In The${RESET} \
${BCYN}Highest${RESET} \
${VBLU}Resolution${RESET}\
${BMGT},${RESET} \
${VBLU}And${RESET} \
${BCYN}Best Audio${RESET} \
${VBLU}Available${RESET}"

OPTION_TWOK="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In${RESET} \
${BCYN}1440p${RESET}\
${BMGT}+${RESET}\
${BCYN}Best${RESET} \
${VBLU}Audio${RESET}"

OPTION_FULL="${VBLU}Download${RESET} \
${BCYN}Video${RESET} \
${VBLU}In${RESET} \
${BCYN}1080p${RESET}\
${BMGT}+${RESET}\
${BCYN}Best${RESET} \
${VBLU}Audio${RESET}"

OPTION_B3="${VBLU}Download An${RESET} \
${BCYN}MP3${RESET} \
${VBLU}File${RESET}"

OPT_PLMP3_CMD=(
  yt-dlp
    -x --audio-format mp3
    -f "bestaudio"
    -o "%(playlist_title)s/%(title)s-%(uploader)s.mp3"
    --progress-template "download:DL: %(progress._percent_str)s ETA: %(progress._eta_str)s Speed: %(progress._speed_str)s"
    --progress
    --console-title
    --yes-playlist
    --ignore-errors
    --no-warnings
    "$URL"
)

OPT_BMKV_CMD=(
  yt-dlp
    -f "bestvideo+bestaudio"
    -o "%(uploader)s - %(title)s [%(height)sp]{Best-Resolution+Audio}.mkv"
    --progress-template "download:DL:%(progress._percent_str)s ETA: %(progress._eta_str)s Speed:%(progress._speed_str)s"
    --progress
    --quiet
    --no-playlist
    --console-title
    --no-check-formats
    --no-warnings
    --ignore-errors
    --write-subs
    --embed-thumbnail
    --embed-chapters
    --embed-subs
    --sub-format srt
    --convert-subs srt
    --merge-output-format mkv
    "$URL"
)

OPT_TWOK_CMD=(
  yt-dlp
    -f "bestvideo[height<=2560]+bestaudio/best[height<=2560]"
    -o "%(uploader)s - %(title)s [%(height)sp].mkv"
    --progress-template "download:DL: %(progress._percent_str)s ETA: %(progress._eta_str)s Speed: %(progress._speed_str)s"
    --progress
    --quiet
    --write-subs
    --no-playlist
    --console-title
    --no-check-formats
    --no-warnings
    --ignore-errors
    --embed-thumbnail
    --embed-chapters
    --embed-subs
    --sub-format srt
    --convert-subs srt
    --merge-output-format mkv
    "$URL"
)

OPT_MKFUL_CMD=(
  yt-dlp
    -f "bestvideo[height<=1080]+bestaudio/best[height<=1080]"
    -o "%(uploader)s - %(title)s [%(height)sp].mkv"
    --progress-template "download:DL: %(progress._percent_str)s ETA: %(progress._eta_str)s Speed: %(progress._speed_str)s"
    --progress
    --quiet
    --write-subs
    --no-playlist
    --console-title
    --no-check-formats
    --no-warnings
    --ignore-errors
    --embed-thumbnail
    --embed-chapters
    --embed-subs
    --sub-format srt
    --convert-subs srt
    --merge-output-format mkv
    "$URL"
)

OPT_BMP3_CMD=(
  yt-dlp
    -x --audio-format mp3
    -f "bestaudio"
    -o "$YT_WRK/%(uploader)s - %(title)s.mp3"
    --quiet
    --progress
    --ignore-errors
    --console-title
    --no-warnings
    --no-check-formats
    --progress-template "download:DL: %(progress._percent_str)s ETA: %(progress._eta_str)s Speed: %(progress._speed_str)s"
    "$URL"
)

DEFAULT="2"
 clear
 toilet -f smslant -F gay "DL Options"
  cowsay -r "$TITLE"
    printf "\n\n\n"
    printf " ┌───────────────────────────────────────────────────────────┐\n"
    printf " │ [1] %s	│\n" "$OPTION_MP3LST"
    printf " ├───────────────────────────────────────────────────────────┤\n"
    printf " │ [2] %s	│\n" "$OPTION_BMKV"
    printf " ├───────────────────────────────────────────────────────────┤\n"
    printf " │ [3] %s	│\n" "$OPTION_TWOK"
    printf " ├───────────────────────────────────────────────────────────┤\n"
    printf " │ [4] %s	│\n" "$OPTION_FULL"
    printf " ├───────────────────────────────────────────────────────────┤\n"
    printf " │ [5] %s	│\n" "$OPTION_B3"
    printf " ├───────────────────────────────────────────────────────────┤\n"
    printf " │ [E] Press [Enter] For Default Option [%d] │\n" "$DEFAULT"
    printf " └───────────────────────────────────────────────────────────┘\n\n\n"

    printf "┌──Press─Any─Button─To─Move─On──┐\n"
    printf "└──>"
    read -r -t 100 DECISION
  clear

DECISION=${DECISION:-$DEFAULT}
rc=2
case "${DECISION}" in
  1)
    printf "Downloading Playlist\n\n\n"
    printf "   ┌───────────────────────────────────────────────┐\n"
    printf "   ├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
    printf "   ├───────────────────────────────────────────────┤\n"
    printf "   │  ───>  📺   Chl: [%s]\n" "$CHANNEL"
    printf "   │  ──->  🙋   Sbs: [%s]\n" "$SUBS"
    printf "   │  ───>  👍   Lks: [%s]\n" "$LIKES"
    printf "   │  ───>  📜   Ply: [%s]\n" "$PTITLE"
    printf "   │  ───>  📆   Upd: [%s]\n" "$UPLOAD_DATE_FMT"
    printf "   └───────────────────────────────────────────────┘\n\n"
    printf "            ┌────────────────────────────┐\n"
    printf "   <────────┤ [Running]:> Playlist Audio ├─────────>\n"
    printf "            └────────────────────────────┘\n\n\n"

    sleep 1.0
    "${OPT_PLMP3_CMD[@]}"
    rc=$?

  if [ "$rc" -eq 0 ]; then
      mpv "${NFS_HOME}${CMP}" >/dev/null 2>&1
      mpv "${NFS_HOME}${FHS}" >/dev/null 2>&1
      cowsay -r "Your MP3 Playlist Has Downloaded Successfully!"
      sleep 1.0
      mpv "${NFS_HOME}${TXS}" >/dev/null 2>&1
    clear
  else
    mpv "${NFS_HOME}${MFGTA}" >/dev/null 2>&1
      printf "Your Audio Playlist Extract Has Failed Please Try Again\n\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
    newdi=$(ls -td -- */ 2>/dev/null | head -n1)
  if [ -n "$newdi" ]; then
      mv -- "$newdi" "$APIT" >/dev/null 2>&1
      cowsay -r "Your MP3 Playlist Has Been Transferred To Audio_PIT Successfully"
      mpv "${NFS_HOME}${FHS}" >/dev/null 2>&1
      sleep 1.0
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 4
  else
      mpv "${NFS_HOME}${MFGTA}" >/dev/null 2>&1
      printf "Your MP3 Playlist Has Failed To Transfer\n\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
  fi
;;
  2)
   mpv "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
    printf "\n\n\n"
    printf " ┌───────────────────────────────────────────────────────┐\n"
    printf " ├──────────────────👽─[Nah─Fam─Studios]─👽──────────────┤\n"
    printf " ├───────────────────────────────────────────────────────┤\n"
    printf " │  ───>  📺   Chl: [%s]\n" "$CHANNEL"
    printf " │  ──->  🙋   Sbs: [%s]\n" "$SUBS"
    printf " │  ───>  👍   Lks: [%s]\n" "$LIKES"
    printf " │  ───>  📹   Res: [%sx%s]\n" "$QLTYW" "$QLTYH"
    printf " │  ───>  📆   Upd: [%s]\n" "$UPLOAD_DATE_FMT"
    printf " └───────────────────────────────────────────────────────┘\n\n\n"
    printf "      ┌─────────────────────────────────────────────┐\n"
    printf " <────┤ [Running]:> Highest Quality Video Available ├────>\n"
    printf "      └─────────────────────────────────────────────┘\n\n"
    printf "\n"
    sleep 1.0
    "${OPT_BMKV_CMD[@]}"
    rc=$?

  if [ "$rc" -eq 0 ]; then
      mpv "${NFS_HOME}/${CMP}"  >/dev/null 2>&1
      mpv "${NFS_HOME}/${FHS}"  >/dev/null 2>&1
      cowsay -r "Your MKV File Has Downloaded Successfully"
      sleep 1.0
      mpv "${NFS_HOME}/${TXS}"  >/dev/null 2>&1
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
    clear
  fi
    newfox=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "$newfox" ]; then
      mv -- "$newfox" "$VPIT" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Been Transferred To VPIT Successfully"
      mpv "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      sleep 1.0
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 4
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your MKV File Has Failed To Transfer\n\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
;;
  3)
    mpv "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
      printf "Downloading %s In 1440p\n" "$TITLE"
      printf "\n\n"
      printf " ┌───────────────────────────────────────────────────┐\n"
      printf " ├──────────────👽─[Nah─Fam─Studios]─👽──────────────┤\n"
      printf " ├───────────────────────────────────────────────────┘\n"
      printf " │  ───>  📺   Chl: [%s]\n" "$CHANNEL"
      printf " │  ──->  🙋   Sbs: [%s]\n" "$SUBS"
      printf " │  ───>  👍   Lks: [%s]\n" "$LIKES"
      printf " │  ───>  📹   Res: [%sx%s]\n" "$QLTYW" "$QLTYH"
      printf " │  ───>  📆   Upd: [%s]\n" "$UPLOAD_DATE_FMT"
      printf " └───────────────────────────────────────────────────┘\n"
      printf "\n\n"
      printf "       ┌───────────────────────────────────────┐\n"
      printf " <─────┤ [Running]: 2K Video Resolution To MKV ├─────>\n"
      printf "       └───────────────────────────────────────┘\n"
      printf "\n\n"
    sleep 2.0

    "${OPT_TWOK_CMD[@]}"
    rc=$?

  if [ "$rc" -eq 0 ]; then
      mpv "${NFS_HOME}/${CMP}" >/dev/null 2>&1
      mpv "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Downloaded Successfully!"
      sleep 1.0
      mpv "${NFS_HOME}/${TXS}" >/dev/null 2>&1
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your Video Download Has Failed To Download.\nPlease Try Again At A Different Time.\n"
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
    newfart=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "$newfart" ]; then
      mv -- "$newfart" "$VPIT" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Been Transferred To VPIT, Successfully!"
      mpv "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 4
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your MKV File Has Failed To Transfer\n"
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
;;
  4)
    mpv "${NFS_HOME}/${MSTART}" >/dev/null 2>&1
      printf "Downloading\n%s\nIn 1080p\n" "$TITLE"
      printf "\n\n"
      printf "┌───────────────────────────────────────────────┐\n"
      printf "├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
      printf "├───────────────────────────────────────────────┤\n"
      printf "│  ───>  📺   Chl:  [%s]\n" "$CHANNEL"
      printf "│  ──->  🙋   Sbs:  [%s]\n" "$SUBS"
      printf "│  ───>  👍   Lks:  [%s]\n" "$LIKES"
      printf "│  ───>  📹   Res:  [%sx%s]\n" "$QLTYW" "$QLTYH"
      printf "│  ───>  📆   Upd:  [%s]\n" "$UPLOAD_DATE_FMT"
      printf "└───────────────────────────────────────────────┘\n"
      printf "\n\n"
      printf "        ┌───────────────────────────────┐\n"
      printf " <──────┤  [Running]: 1080p Video+Audio ├──────>\n"
      printf "        └───────────────────────────────┘\n"
      printf "\n\n"
    sleep 1.0
    "${OPT_MKFUL_CMD[@]}"
    rc=$?

  if [ "$rc" -eq 0 ]; then
      mpv "${NFS_HOME}/${CMP}"  >/dev/null 2>&1
      mpv "${NFS_HOME}/${FHS}"  >/dev/null 2>&1
      cowsay -r "Your MKV File Has Downloaded Successfully"
      sleep 1.0
      mpv "${NFS_HOME}/${TXS}"  >/dev/null 2>&1
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your Video Download Has Failed\nPlease Try Again Sometime In The Far\nFar Future So I Am Not Here For It\n"
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
    new_faggot_mid=$(ls -t -- *.mkv 2>/dev/null | head -n1)
  if [ -n "$new_faggot_mid" ]; then
      mv -- "$new_faggot_mid" "$VPIT" >/dev/null 2>&1
      cowsay -r "Your MKV File Has Been Transferred To Video_PIT Successfully"
      mpv "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      sleep 1.0
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 4
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your MKV File Has Failed To Transfer\n"
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
;;
  5)
      printf "Downloading %s To An MP3 File\n" "$TITLE"
      printf "\n\n"
      printf "  ┌───────────────────────────────────────────────┐\n"
      printf "  ├────────────👽─[Nah─Fam─Studios]─👽────────────┤\n"
      printf "  ├───────────────────────────────────────────────┤\n"
      printf "  │  ───>  📺   Chl:  [%s]\n" "$CHANNEL"
      printf "  │  ──->  🙋   Sbs:  [%s]\n" "$SUBS"
      printf "  │  ───>  👍   Lks:  [%s]\n" "$LIKES"
      printf "  │  ───>  📹   Res:  [%sx%s]\n" "$QLTYW" "$QLTYH"
      printf "  │  ───>  📆   Upd:  [%s]\n" "$UPLOAD_DATE_FMT"
      printf "  └───────────────────────────────────────────────┘\n\n\n"
      printf "           ┌────────────────────────────┐\n"
      printf "  <────────┤ [Running]: Best Audio FMT  ├─────────>\n"
      printf "           └────────────────────────────┘\n"
      printf "\n\n"
    sleep 1.0

    "${OPT_BMP3_CMD[@]}"
    rc=$?

  if [ "$rc" -eq 0 ]; then
      mpv "${NFS_HOME}/${CMP}"  >/dev/null 2>&1
      mpv "${NFS_HOME}/${FHS}"  >/dev/null 2>&1
      cowsay -r "Your MP3 File Has Downloaded Successfully!"
      sleep 1.0
      mpv "${NFS_HOME}/${TXS}"  >/dev/null 2>&1
    clear
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your Audio File Extract Has Failed, Please Try Again\n"
      printf "\n\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
    clear
  fi
    freshfish=$(ls -t -- *.mp3 2>/dev/null | head -n1)
  if [ -n "$freshfish" ]; then
      mv -- "$freshfish" "$APIT" >/dev/null 2>&1
      cowsay -f cube "Your MP3 File Has Been Transferred To APIT, Successfully!"
      mpv "${NFS_HOME}/${FHS}" >/dev/null 2>&1
      sleep 1.0
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 4
  else
      mpv "${NFS_HOME}/${MFGTA}" >/dev/null 2>&1
      printf "Your MP3 File Has Failed To Transfer\n"
      printf "\n"
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 10
  fi
  ;;
  *)
    rc=2
      printf "┌──Press─Any─Button─To─Move─On──┐\n"
      printf "└──>"
      read -r -n1 -t 60
  ;;
esac
